// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	dto "server/internal/dto"

	mock "github.com/stretchr/testify/mock"
)

// MockAuthService is an autogenerated mock type for the AuthService type
type MockAuthService struct {
	mock.Mock
}

// GetGoogleOAuthURL provides a mock function with no fields
func (_m *MockAuthService) GetGoogleOAuthURL() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGoogleOAuthURL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetUserProfile provides a mock function with given fields: userID
func (_m *MockAuthService) GetUserProfile(userID string) (*dto.AuthMeResponse, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserProfile")
	}

	var r0 *dto.AuthMeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*dto.AuthMeResponse, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) *dto.AuthMeResponse); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.AuthMeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GoogleSignIn provides a mock function with given fields: idToken
func (_m *MockAuthService) GoogleSignIn(idToken string) (*dto.AuthResponse, error) {
	ret := _m.Called(idToken)

	if len(ret) == 0 {
		panic("no return value specified for GoogleSignIn")
	}

	var r0 *dto.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*dto.AuthResponse, error)); ok {
		return rf(idToken)
	}
	if rf, ok := ret.Get(0).(func(string) *dto.AuthResponse); ok {
		r0 = rf(idToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.AuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(idToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleGoogleOAuthCallback provides a mock function with given fields: code
func (_m *MockAuthService) HandleGoogleOAuthCallback(code string) (*dto.AuthResponse, error) {
	ret := _m.Called(code)

	if len(ret) == 0 {
		panic("no return value specified for HandleGoogleOAuthCallback")
	}

	var r0 *dto.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*dto.AuthResponse, error)); ok {
		return rf(code)
	}
	if rf, ok := ret.Get(0).(func(string) *dto.AuthResponse); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.AuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: req
func (_m *MockAuthService) Login(req *dto.LoginRequest) (*dto.AuthResponse, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *dto.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*dto.LoginRequest) (*dto.AuthResponse, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*dto.LoginRequest) *dto.AuthResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.AuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*dto.LoginRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: refreshToken
func (_m *MockAuthService) Logout(refreshToken string) error {
	ret := _m.Called(refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshToken provides a mock function with given fields: refreshToken
func (_m *MockAuthService) RefreshToken(refreshToken string) (*dto.AuthResponse, error) {
	ret := _m.Called(refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 *dto.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*dto.AuthResponse, error)); ok {
		return rf(refreshToken)
	}
	if rf, ok := ret.Get(0).(func(string) *dto.AuthResponse); ok {
		r0 = rf(refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.AuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: req
func (_m *MockAuthService) Register(req *dto.RegisterRequest) error {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto.RegisterRequest) error); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendOTP provides a mock function with given fields: email
func (_m *MockAuthService) SendOTP(email string) error {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for SendOTP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyOTP provides a mock function with given fields: email, otp
func (_m *MockAuthService) VerifyOTP(email string, otp string) (*dto.AuthResponse, error) {
	ret := _m.Called(email, otp)

	if len(ret) == 0 {
		panic("no return value specified for VerifyOTP")
	}

	var r0 *dto.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*dto.AuthResponse, error)); ok {
		return rf(email, otp)
	}
	if rf, ok := ret.Get(0).(func(string, string) *dto.AuthResponse); ok {
		r0 = rf(email, otp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.AuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, otp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockAuthService creates a new instance of MockAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthService {
	mock := &MockAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
